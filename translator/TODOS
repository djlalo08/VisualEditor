Our actual stored code is in IR

This means that clojure code is only ever generated -- never read.

We need the following abilities:
    1. IR to CLJ, so we can run IR code
    2. IR to UI, so we can display IR
    3. UI interacts directly with IR. (So it's not "UI updates and then we translate UI to IR". Instead, it is "interacting with UI triggers updates to IR and updates to IR trigger updates to UI")

    IR includes "navigational" information like what box is currently selected

    We need a textual representation of IR. So we need to be able to go from text to IR and IR to text.
    We actually already have IR to text (it's Tag.my_str())

========== CURRENTLY WORKING ON =========
1. Associate changes to UI with changes to IR
    Thoughts: Every Tag should have a unique id, which is associated with the element in the UI.
    When something happens to UI element, we make an update to IR element

    Now the big issue is that we are working with updating js-code in a real-time via a call to a js file...
    This is obviously inefficient (if even possible).

    I think first step is that jsxify should actually be JS code, since we need to update GeneratedApp whenever, say a node is clicked.
    I don't know if a JS file has the ability to update another file. I also don't really want to deal with setting up a python server tho,
    For JS to call python when it needs a request to update IR -- that seems like a bad solution...

    Eventually, it should all be running in the js front-end and I guess it duplicates in IR at the same time?
    It's the kind of way I imagine something like Google Docs works.
    Basically You have a UI triggered action (say drag a thing). The drag action callback does 2 things --
        it both updates the IR and it responds visually on the page. Then periodicaly we can sync the UI with the IR
        to make sure they match up.

    Can Javascript be used to rewrite itself? That would be crazy -- build a cloned site based on the changed specs and redirected You to it...
    The problem with that is that it's super inefficient...You shouldn't have to reload an entire page to demonstrate small local changes...
    It's all future questions. I think for now, I'm ok focusing on a much more primitive version: upon a UI event, update IR.
    Then we click the run button button in Python which updates GeneratedApp which reloads the site

Breakdown: Make items selectable:
    - Need to have all items have an on-click function
    - On-click triggers an IR update
    - This means the every IR object needs a unique id, so we can associate IR objects with jsx objects


========== TODO =============
2. IR to CLJ

- Jsxify looks pretty messy and bad