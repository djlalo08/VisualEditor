#TODO more work on code generation
    how it will work:
        - build bottom-up map -- like bfs, but starting at the bottom
        - Collect all ins to be able to build method
        - Do bottom-up map on tree, for each element You come across -- check if it has been added to state. If not, make a new var for it. Make it a 3-tuple: ('name', #, 'var_name')
        - Do a df-reduce on the map -- wires are replaced with their var names, maps take their children (all var names now) and replace selves with a line of text: 
            If a var has already been bound, rather than writing x =x, just delete it
            Keep track of all bindings
            Note that all ins are considered to already be bound (they are fn args)
            e.g. 
            ('out', 0, 'out0')
                ('fn', 1, 0)
                  ('in', 0)
                  ('in', 1)

                |       |       |
                V       V       V

            ('out', 0)
                ('fn', 1, 0)
                  in || 0
                  in || 1

                |       |       |
                V       V       V

            ('out', 0)
                fn1 = || 0

            vars = { fn1 = fn(in[0], in[1])}

                |       |       |
                V       V       V

            out[0] = fn1[0]
            
            vars = { fn1 = fn(in[0], in[1])}

            ex2:
            ('out', 0)
              ('fn', 23, 0)
                ('fn', 1, 0)
                  ('in', 0)
                  ('in', 1)
                ('fn', 1, 0)
                  ('in', 0)
                  ('in', 1)

                |       |       |
                V       V       V

            ('out', 0)
              ('fn', 23, 0)
                ('fn', 1, 0)
                  in || 0
                  in || 1
                ('fn', 1, 0)
                  ('in', 0)
                  ('in', 1)

                |       |       |
                V       V       V

            ('out', 0)
              ('fn', 23, 0)
                fn1 || 0
                ('fn', 1, 0)
                  ('in', 0)
                  ('in', 1)
                  
            vars = { fn1 = fn(in[0], in[1])}

                |       |       |
                V       V       V

        This step happens the way it does because next thing we look at is ('fn',1)
        and that value is already in our table, so we just replace it with the var name

            ('out', 0)
              ('fn', 23, 0)
                fn1 || 0
                fn1 || 0

            vars = { fn1 = fn(in0, in1)}

                |       |       |
                V       V       V

            ('out', 0)
              fn23 || 0

            vars = { 
                fn1 = fn(in[0], in[1])
                fn23 = fn(fn1[0], fn1[0])
            }

                |       |       |
                V       V       V

            
            out[0] = fn23[0]

            vars = { 
                fn1 = fn(in[0], in[1])
                fn23 = fn(fn1[0], fn1[0])
            }
        
        ex 3:
        ('out', 0)
          ('fn', 1, 0)
            ('in', 0)
            ('in', 1)
        ('out', 1)
          ('fn', 1, 1)
            ('in', 0)
            ('in', 1)

                |       |       |
                V       V       V

        ('out', 0)
          ('fn', 1, 0)
            in || 0
            in || 1
        ('out', 1)
          ('fn', 1, 1)
            ('in', 0)
            ('in', 1)

                |       |       |
                V       V       V

        ('out', 0)
            fn1 || 0
        ('out', 1)
          ('fn', 1, 1)
            ('in', 0)
            ('in', 1)
              
        vars = { fn1=fn(in[0], in[1])}      

                |       |       |
                V       V       V

        out[0] = fn1[0]
        ('out', 1)
          ('fn', 1, 1)
            ('in', 0)
            ('in', 1)
              
        vars = { fn1=fn(in[0], in[1])}      

                |       |       |
                V       V       V

        out[0] = fn1[0]
        ('out', 1)
            fn1 || 1
              
        vars = { fn1=fn(in[0], in[1])}      

                |       |       |
                V       V       V

        out[0] = fn1[0]
        out[1] = fn1[1]
              
        vars = { fn1=fn(in[0], in[1]) }      